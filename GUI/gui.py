
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

import sys
import cv2
from PIL import Image, ImageTk, ImageDraw
import os
import u2net
import torch
from measure_model import Conv_BoDiEs, predict_and_save
import csv
import numpy as np
from screeninfo import get_monitors



OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\joshu\OneDrive\바탕 화면\Tkinter-Designer-master\build\assets\frame0")

gender = 0
model_path = ""
# global로 close_camera를 선언
close_camera_func = None
cap = 0

canvas = None
entry_1 = None
button_1 = None
button_2 = None
button_3 = None
button_4=None
text_name = None
text_gender = None
text_welcome = None
text_measurement = None
text_male = None
text_female = None
image_2 = None
text_camera = None
image_4 = None
text_stand_pose = None
text_countdown = None
text_captured = None
image_3 = None
image_5 = None
entry_bg_1 =None
image_3 = None
tree = None

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

def male_button_clicked():
    global gender, model_path
    
    model_path = "build/bodymodel/male/Conv_BoDiEs_male_grayscale.pth"
    gender = 1

    print(f"Gender: Male {gender}")
    # 버튼의 이미지를 새로운 이미지로 변경
    new_button_image = PhotoImage(file=relative_to_assets("button_check.png"))
    button_2.config(image=new_button_image)
    button_2.image = new_button_image  # 이미지가 가비지 컬렉션되지 않도록 참조를 유지

    # female 버튼 초기화
    new_button_image = PhotoImage(file=relative_to_assets("button_empty.png"))
    button_3.config(image=new_button_image)
    button_3.image = new_button_image  # 이미지가 가비지 컬렉션되지 않도록 참조를 유지

def female_button_clicked():
    global gender, model_path
    
    model_path = "build/bodymodel/female/Conv_BoDiEs_female_grayscale.pth"
    gender = 2

    print(f"Gender: Female {gender}")
    # 버튼의 이미지를 새로운 이미지로 변경
    new_button_image = PhotoImage(file=relative_to_assets("button_check.png"))
    button_3.config(image=new_button_image)
    button_3.image = new_button_image  # 이미지가 가비지 컬렉션되지 않도록 참조를 유지

    # male 버튼 초기화
    new_button_image = PhotoImage(file=relative_to_assets("button_empty.png"))
    button_2.config(image=new_button_image)
    button_2.image = new_button_image  # 이미지가 가비지 컬렉션되지 않도록 참조를 유지

import cv2
from tkinter import *
from PIL import Image, ImageTk, ImageDraw
import time

# 카메라를 캡처하고 Tkinter 캔버스에 실시간으로 보여주는 함수
def show_camera(canvas, image_2):
    global cap
    # 카메라 캡처 시작 (기본 카메라 사용)
    cap = cv2.VideoCapture(0)
    
    # 카메라가 열리지 않으면 경고
    if not cap.isOpened():
        print("Camera not found!")
        return
    
    def update_frame():
        ret, frame = cap.read()  # 카메라에서 한 프레임을 읽어옴
        if ret:
            # OpenCV에서 BGR 형식으로 반환되므로 RGB로 변환
            frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

            # 화면 돌리기
            frame = cv2.rotate(frame, cv2.ROTATE_90_COUNTERCLOCKWISE)

            # image_2의 크기 가져오기
            bbox = canvas.bbox(image_2)  # image_2의 경계 좌표 (x1, y1, x2, y2)
            image_width = bbox[2] - bbox[0]  # x2 - x1
            image_height = bbox[3] - bbox[1]  # y2 - y1

            # 이미지를 image_2의 크기에 맞게 리사이즈
            frame_resized = cv2.resize(frame, (image_width, image_height))

            # 리사이즈된 이미지를 Pillow 형식으로 변환
            image = Image.fromarray(frame_resized)

            # 둥근 모서리 추가
            image_with_rounded_corners = add_rounded_corners(image, radius=40)

            # Pillow 이미지를 Tkinter에서 사용할 수 있는 형식으로 변환
            photo = ImageTk.PhotoImage(image=image_with_rounded_corners)

            # 캔버스에 있는 image_2 항목에 새로운 이미지를 업데이트
            canvas.itemconfig(image_2, image=photo)
            canvas.image = photo  # 이미지 참조 유지

        # 10ms마다 새로운 프레임을 갱신
        canvas.after(10, update_frame)
    
    # 첫 번째 프레임 업데이트 시작
    update_frame()

    # 카메라 종료 시 해제
    def close_camera():
        cap.release()

    return close_camera  # 카메라를 종료할 함수 반환

# 둥근 모서리를 적용할 함수
def add_rounded_corners(image, radius):
    # 이미지의 크기
    width, height = image.size
    
    # 마스크 이미지 만들기 (흰색 배경)
    mask = Image.new('L', (width, height), 0)
    draw = ImageDraw.Draw(mask)
    
    # 둥근 모서리를 위한 원을 그리기
    draw.rounded_rectangle((0, 0, width, height), radius, fill=255)
    
    # 마스크를 이미지에 적용
    image.putalpha(mask)
    
    return image

def on_start_button():
    global gender, close_camera_func, canvas, entry_1, button_1, button_2, button_3, text_name, text_gender, text_welcome, text_measurement, text_male, text_female, image_2, text_camera, image_4, text_stand_pose, text_countdown, text_captured, image_5, entry_bg_1

    value = entry_1.get()  # Entry에서 값을 가져옴
    
    # 기본 폴더 경로 생성
    base_path = value  # value가 폴더명
    print(f"Hello{value}")

    if value != None:
        # 폴더 경로가 존재하지 않으면 생성
        base_path = "no_id"

    
    if not os.path.exists(base_path):
        os.makedirs(base_path)  # value 이름의 폴더 생성
    
    # 하위 폴더 생성
    result_folder = os.path.join(base_path, 'result')
    image_folder = os.path.join(base_path, 'image')

    # result 폴더와 image 폴더가 없으면 생성
    if not os.path.exists(result_folder):
        os.makedirs(result_folder)
    
    if not os.path.exists(image_folder):
        os.makedirs(image_folder)

    # 폴더 생성 완료 출력
    print(f"Created folder structure: {base_path}/result and {base_path}/image")

    if gender == 1 or gender == 2:  # gender값을 정확히 비교
        print("Start")
    
        # 필요없는 버튼 및 텍스트 숨기기
        entry_1.place_forget()
        button_1.place_forget()
        button_2.place_forget()
        button_3.place_forget()
        
        canvas.itemconfig(text_name, state="hidden")
        canvas.itemconfig(text_gender, state="hidden")
        canvas.itemconfig(text_welcome, state="hidden")
        canvas.itemconfig(text_measurement, state="hidden")
        canvas.itemconfig(text_male, state="hidden")
        canvas.itemconfig(text_female, state="hidden")
        canvas.itemconfig(entry_bg_1, state = "hidden")

        # 카메라를 실행하고 close_camera_func를 반환받음
        canvas.itemconfig(image_2, state="normal")
        canvas.itemconfig(text_camera, state="normal")
        close_camera_func = show_camera(canvas, image_2)

        # "Stand in front pose" 텍스트 표시 (3초 동안)
        canvas.itemconfig(image_4, state="normal")
        canvas.itemconfig(text_stand_pose, state="normal")
        # 3초 후 카운트다운 시작
        canvas.after(3000, start_countdown)

def start_countdown():
    global text_stand_pose, text_countdown, text_captured, canvas
    # 카운트다운 텍스트 표시
    canvas.itemconfig(text_stand_pose, state = "hidden")
    countdown_time = 5
    def countdown():
        nonlocal countdown_time
        if countdown_time > 0:
            canvas.itemconfig(text_countdown, text=str(countdown_time))  # 카운트다운 텍스트 업데이트
            canvas.itemconfig(text_countdown, state="normal")  # 텍스트를 보이게 설정
            countdown_time -= 1
            canvas.after(1000, countdown)  # 1초 후 다시 호출
        elif countdown_time == 0:
            
            canvas.itemconfig(text_countdown, state="hidden")  # 카운트다운 종료 후 숨기기

            # "Captured" 텍스트 표시
            canvas.itemconfig(text_captured, state="normal")

            countdown_time -=1
            canvas.after(100, countdown) 

        else:
            # 카메라 캡처하여 프레임 저장
            capture_frame()
        
            # 카메라 종료
            close_camera_func()

            image_processing()

    countdown()  # 카운트다운 시작

def capture_frame():
    # 카메라 프레임을 캡처하고 저장하는 부분
    global cap
    ret, frame = cap.read()
    if ret:
        filename = "build/result/image/captured_image.png"
        cv2.imwrite(filename, frame)  # 이미지를 파일로 저장
    cap.release()



def estimation():
    global model_path
    device = "cuda" if torch.cuda.is_available() else "cpu"
    print(f"Using {device} device")
    if torch.cuda.is_available():
        print(f'Device name: {torch.cuda.get_device_name(0)}')
    
    model = Conv_BoDiEs().to(device)

    image = cv2.imread('build/result/image/captured_image.png', cv2.IMREAD_GRAYSCALE )
    mask_image = cv2.imread('build/result/grayscale_image/captured_image.png', cv2.IMREAD_GRAYSCALE)
    black = cv2.bitwise_and(image, mask_image)
    cv2.imwrite("build/result/black_background.png", black)

    predict_and_save(model, model_path, image_path="build/result/grayscale_image/captured_image.png", result_file_path='build/result/predicted/results.csv', device=device)

    show_result()

def image_processing():
    
    filename = 'build/result/image/captured_image.png'
    need2Rotateimage = cv2.imread(filename)
    rotated_image_clockwise = cv2.rotate(need2Rotateimage, cv2.ROTATE_90_COUNTERCLOCKWISE)
    cv2.imwrite(filename, rotated_image_clockwise)

    
    image_dir = os.path.join(os.getcwd(), 'build','result', 'image')

    prediction_dir = os.path.join(os.getcwd(), 'build','result', 'grayscale_image')
    model_path2 = os.path.join(os.getcwd(), 'build', 'u2net_saved_models', 'u2net_human_seg', 'u2net_human_seg.pth')

    u2net.run_u2net_inference(image_dir, prediction_dir, model_path2, num_images=2)

    print("Image Processing Complete\n\n")

    estimation()

import tkinter as tk
from tkinter import ttk


def show_result():
    global canvas, entry_1, button_1, button_2, button_3, text_name, text_gender, text_welcome, text_measurement, text_male, text_female, image_2, text_camera, image_4, text_stand_pose, text_countdown, text_captured, image_3, image_5, button_4, tree

    # 이미지 및 텍스트 숨기기
    canvas.itemconfig(image_2, state="hidden")
    canvas.itemconfig(text_camera, state="hidden")
    canvas.itemconfig(text_captured, state="hidden")
    canvas.itemconfig(image_4, state="hidden")

    # 이미지 표시
    canvas.itemconfig(image_5, state="normal")
    canvas.itemconfig(image_3, state="normal")

    # 만약 버튼이 초기화되지 않았다면 다시 초기화
    if button_4.winfo_exists() == 0:
        button_image_4 = PhotoImage(file=relative_to_assets("button_again.png"))
        button_4 = Button(
            image=button_image_4,
            borderwidth=0,
            highlightthickness=0,
            command=reset_process,
            relief="flat"
        )

    # 버튼을 원하는 위치에 다시 배치
    # button_4.place(x=519.0, y=7.0, width=66.0, height=39.0)

    # image_3의 크기 가져오기 (캔버스에서 image_3 항목의 크기)
    bbox = canvas.bbox(image_3)  # (x1, y1, x2, y2)
    image_width = bbox[2] - bbox[0]  # x2 - x1
    image_height = bbox[3] - bbox[1]  # y2 - y1

    # 이미지를 읽고 리사이즈
    image_or = cv2.imread("build/result/grayscale_image/captured_image.png")
    resized_image = cv2.resize(image_or, (image_width, image_height))
    imageRe = Image.fromarray(resized_image)

    # 둥근 모서리를 적용
    resized_image_with_rounded_corners = add_rounded_corners(imageRe, radius=40)

    # Pillow 이미지를 Tkinter에서 사용할 수 있는 형식으로 변환
    new_image_tk = ImageTk.PhotoImage(resized_image_with_rounded_corners)

    # 캔버스에 있는 image_3 항목에 새로운 이미지를 설정
    canvas.itemconfig(image_3, image=new_image_tk)
    canvas.image = new_image_tk

    # CSV 파일 경로 (함수 내에서 정의)
    csv_file_path = "build/result/predicted/results.csv"

    # CSV 파일을 읽고 데이터를 리스트로 변환
    with open(csv_file_path, newline='', encoding='utf-8') as csvfile:
        reader = csv.reader(csvfile)
        data = list(reader)

    # Treeview 위젯 설정 (캔버스에 추가하기 위해)
    tree_frame = tk.Frame(canvas)
    tree_frame.place(x=100, y=770)  # 캔버스 내 위치 조정

    # Treeview 위젯 생성 (열 수에 맞게)
    tree = ttk.Treeview(tree_frame, columns=[str(i) for i in range(len(data[0]))], show="headings")

    # 글씨체 "Assistant"로 설정하고 Bold 속성 추가
    style = ttk.Style()
    style.configure("Treeview", font=("Assistant", 14, "bold"), rowheight=30)

    tree.config(height=4)  # origianlly 6 

    # 첫 번째 열(0번)은 왼쪽 정렬, 두 번째 열(1번)은 중앙 정렬
    style.configure("Treeview.Heading", anchor="center")  # 헤더도 중앙 정렬
    tree.heading(1, anchor="center")  # 두 번째 열의 제목 중앙 정렬
    tree.column(1, anchor="center")   # 두 번째 열의 내용 중앙 정렬

    # 헤더 스타일 설정
    style.configure("Treeview.Heading", font=("Assistant", 16, "bold"), anchor="center")  # 헤더의 글꼴 크기와 정렬

    # 열 헤더 설정 (첫 번째 행을 헤더로 사용)
    for col_num, col_name in enumerate(data[0]):
        tree.heading(col_num, text=col_name)

    # 데이터를 Treeview에 추가
    for row in data[1:]:
        # 두 번째 열 값이 숫자인 경우 소수점 이하를 제거
        if row[1].replace('.', '', 1).isdigit():  # 두 번째 열이 숫자인 경우
            row[1] = str(int(float(row[1])))  # 소수점 이하 제거하고 정수로 변환

        tree.insert("", "end", values=row)

    
    # 데이터 행 색상 변경 (홀수, 짝수 행 색상 다르게)
    for index, row in enumerate(tree.get_children()):
        if index % 2 == 0:
            tree.item(row, tags="even")
        else:
            tree.item(row, tags="odd")
    
    # 태그 색상 설정
    tree.tag_configure("even", background="#f0f0f0")  # 짝수 행 색상
    tree.tag_configure("odd", background="#ffffff")   # 홀수 행 색상

    # Treeview 표시
    tree.pack()

def reset_process():
    global tree
    """Reset the entire process to the beginning"""
    print("Resetting the process...")

    # 텍스트 항목 초기화 (Canvas에서 보여야 하는 텍스트만)
    canvas.itemconfig(text_welcome, state="normal")
    canvas.itemconfig(text_measurement, state="normal")
    canvas.itemconfig(text_name, state="normal")
    canvas.itemconfig(text_gender, state="normal")
    canvas.itemconfig(text_male, state="normal")
    canvas.itemconfig(text_female, state="normal")
    canvas.itemconfig(image_3, state="hidden")
    canvas.itemconfig(image_5, state="hidden")

    # # 버튼과 엔트리 위젯 상태 변경
    # button_1.config(state="normal")  # 버튼 1 보이기
    # button_2.config(state="normal")  # 버튼 2 보이기
    # button_3.config(state="normal")  # 버튼 3 보이기
    # entry_1.config(state="normal")   # 엔트리 필드 보이기

    # 카메라 관련 요소 숨기기
    canvas.itemconfig(image_2, state="hidden")
    canvas.itemconfig(text_camera, state="hidden")
    canvas.itemconfig(text_stand_pose, state="hidden")
    canvas.itemconfig(text_countdown, state="hidden")
    canvas.itemconfig(text_captured, state="hidden")


    # 성별 선택 버튼 초기화 (이미지 변경)
    button_2.config(image=PhotoImage(file=relative_to_assets("button_empty.png")))
    button_3.config(image=PhotoImage(file=relative_to_assets("button_empty.png")))

    # # 표가 이미 있으면 삭제
    # if 'tree' in globals():
    #     tree.destroy()

    # 초기 상태로 창 재구성
    create_window()






def create_window():
    global canvas, entry_1, button_1, button_2, button_3, text_name, text_gender, text_welcome, text_measurement, text_male, text_female, image_2, text_camera, image_4, text_stand_pose, text_countdown, text_captured, image_5, entry_bg_1, image_3, button_4


    # Tkinter 기본 창 생성
    window = Tk()

    # 듀얼 스크린 정보 가져오기
    monitors = get_monitors()

    # 확장된 디스플레이(두 번째 모니터)를 선택
    if len(monitors) > 1:
        second_monitor = monitors[1]  # 두 번째 화면 정보 가져오기
    else:
        second_monitor = monitors[0]  # 두 번째 화면이 없으면 첫 번째 화면 사용

    # 두 번째 모니터 위치
    screen_x = second_monitor.x
    screen_y = second_monitor.y
    screen_width = second_monitor.width
    screen_height = second_monitor.height

    # 창 크기 설정 및 위치 지정
    # window.geometry(f"{screen_width}x{screen_height}+{screen_x}+{screen_y}")
    # window.configure(bg="#FFFFFF")

    # # 상태창 숨기고 전체 화면으로 설정
    # window.attributes("-fullscreen", True)

    # # ESC 키를 눌렀을 때 전체화면 해제
    # def exit_fullscreen(event=None):
    #     window.attributes("-fullscreen", False)

    # # ESC 키와 연결
    # window.bind("<Escape>", exit_fullscreen)


    # 창 크기 설정 및 위치 지정
    window.geometry(f"{screen_width}x{screen_height}+{screen_x}+{screen_y}")
    window.configure(bg="#FFFFFF")

    # 창을 화면 경계로 이동 후 전체화면 설정
    def enter_fullscreen():
        window.attributes("-fullscreen", True)

    # ESC 키를 눌렀을 때 전체화면 해제
    def exit_fullscreen(event=None):
        window.attributes("-fullscreen", False)

        # ESC 키와 연결
    window.bind("<Escape>", exit_fullscreen)

    # 초기 화면 설정
    window.after(100, enter_fullscreen)  # 0.1초 지연 후 전체화면 진입

    canvas = Canvas(
        window,
        bg = "#FFFFFF",
        height = 1024,
        width = 600,
        bd = 0,
        highlightthickness = 0,
        relief = "ridge"
    )

    canvas.place(x = 0, y = 0)

    image_image_1 = PhotoImage(
        file=relative_to_assets("image_1.png"))
    image_1 = canvas.create_image(
        300.00006103515625,
        511.00000858148496,
        image=image_image_1
    )

    text_welcome = canvas.create_text(
        60.0,
        64.0,
        anchor="nw",
        text="Welcome !",
        fill="#2F275E",
        font=("Assistant ExtraBold", 96 * -1)
    )

    text_measurement = canvas.create_text(
        70.0,
        190.0,
        anchor="nw",
        text="2D Base Body\nMeasurement",
        fill="#554E80",
        font=("Assistant SemiBold", 48 * -1)
    )

    text_name = canvas.create_text(
        88.0,
        390.0,
        anchor="nw",
        text="Name",
        fill="#554E80",
        font=("Assistant Bold", 36 * -1)
    )

    text_gender = canvas.create_text(
        88.0,
        620.0,
        anchor="nw",
        text="Gender",
        fill="#554E80",
        font=("Assistant Bold", 36 * -1)
    )

    image_image_4 = PhotoImage(file=relative_to_assets("entry_2_round.png"))
    image_4 = canvas.create_image(
        300.0,  # x 좌표
        920.0,  # y 좌표
        image= image_image_4,
        state="hidden"  # 초기 상태는 숨김
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        300.0,
        400.0,  # 480 originally
        image=image_image_2,
        state = "hidden"
    )

    # 'Stand in front pose' 텍스트 정의 (숨김)
    text_stand_pose = canvas.create_text(
        300.0,  # x 좌표
        920.0,  # y 좌표
        anchor="center",  # 텍스트 중앙 정렬
        text="Stand in front pose",  # 텍스트 내용
        fill="#2F275E",  # 텍스트 색상
        font=("Assistant SemiBold", 36 * -1),
        state="hidden"  # 초기 상태는 숨김
    )

    # 카운트다운 텍스트 정의 (숨김)
    text_countdown = canvas.create_text(
        300.0,  # x 좌표
        920.0,  # y 좌표
        anchor="center",  # 텍스트 중앙 정렬
        text="5",  # 초기 카운트다운 숫자
        fill="#2F275E",  # 텍스트 색상
        font=("Assistant SemiBold", 48 * -1),
        state="hidden"  # 초기 상태는 숨김
    )

    # 'Captured' 텍스트 정의 (숨김)
    text_captured = canvas.create_text(
        300.0,  # x 좌표
        920.0,  # y 좌표
        anchor="center",  # 텍스트 중앙 정렬
        text="Captured",  # 텍스트 내용
        fill="#2F275E",  # 텍스트 색상
        font=("Assistant ExtraBold", 48 * -1),
        state="hidden"  # 초기 상태는 숨김
    )

    entry_image_1 = PhotoImage(
        file=relative_to_assets("entry_1.png"))
    entry_bg_1 = canvas.create_image(
        290.0,
        485.0,
        image=entry_image_1
    )
    entry_1 = Entry(
        bd=0,
        bg="#F2F2F2",
        fg="#000716",
        highlightthickness=0
    )
    entry_1.place(
        x=88.0,
        y=450.0,
        width=404.0,
        height=68.0
    )

    button_image_1 = PhotoImage(
        file=relative_to_assets("button_1.png"))
    button_1 = Button(
        image=button_image_1,
        borderwidth=0,
        highlightthickness=0,
        command= on_start_button,
        relief="flat"
    )
    button_1.place(
        x=218.0,
        y=881.0,
        width=165.0,
        height=50.0
    )

    image_image_2 = PhotoImage(
        file=relative_to_assets("image_2.png"))
    image_2 = canvas.create_image(
        300.0,
        450.0,
        image=image_image_2,
        state = "hidden"
    )

    image_image_5 = PhotoImage(
        file=relative_to_assets("entry_3_R2.png"))
    image_5 = canvas.create_image(
        300.0,
        850.0,  # 890 originally
        image=image_image_5,
        state = "hidden"
    )

    text_camera = canvas.create_text(
        200.0,
        0.0,
        anchor="nw",
        text="Camera On",
        fill="#AF1740",
        font=("Assistant ExtraBold", 40 * -1),
        state = "hidden"
    )

    image_image_3 = PhotoImage(
        file=relative_to_assets("image_3.png"))
    image_3 = canvas.create_image(
        300.0,
        380.0,  # originally 405
        image=image_image_3,
        state = "hidden"
    )

    button_image_2 = PhotoImage(
        file=relative_to_assets("button_empty.png"))
    button_2 = Button(
        image=button_image_2,
        borderwidth=0,
        highlightthickness=0,
        command= male_button_clicked,
        relief="flat"
    )
    button_2.place(
        x=88.0,
        y=680.0,  
        width=30.0,
        height=30.0
    )

    button_image_3 = PhotoImage(
        file=relative_to_assets("button_empty.png"))
    button_3 = Button(
        image=button_image_3,
        borderwidth=0,
        highlightthickness=0,
        command= female_button_clicked,
        relief="flat",
    )
    button_3.place(
        x=285.0,
        y=680.0,
        width=30.0,
        height=30.0
    )

    text_male =canvas.create_text(
        135.0,
        680.0,
        anchor="nw",
        text="Male",
        fill="#557ECC",
        font=("Assistant Bold", 24 * -1),
        
    )

    text_female = canvas.create_text(
        332.0,
        680.0,
        anchor="nw",
        text="Female",
        fill="#557ECC",
        font=("Assistant Bold", 24 * -1),
    )

    button_image_4 = PhotoImage(
        file=relative_to_assets("button_again.png"))
    button_4 = Button(
        image=button_image_4,
        borderwidth=0,
        highlightthickness=0,
        command=reset_process,
        relief="flat"
    )

    button_4.place_forget()
    window.resizable(True, True)
    window.mainloop()


if __name__ == "__main__":
    create_window()